local spec = require("test.spec").new()
local memcached = require("memcached")
local option_string = "--SERVER=localhost"

spec:describe("test constants", function(report)
  assert(memcached._VERSION)
end)

spec:describe("test lib_version", function(report)
  assert(memcached.lib_version():find("1.0"))
end)

spec:describe("check_configuration", function(report)
  local ok, err
  ok, err = memcached.check_configuration("--SERVE=1")
  assert(not ok)
  assert(err:find("UNKNOWN_OPTION"))
  ok, err = memcached.check_configuration("--SERVER=localhost")
  assert(ok)
  assert(err == nil)
end)

spec:describe("verify new", function(report)
  assert(memcached.new)
  assert(type(memcached.new) == "function")
end)

spec:describe("memcached:clone()", function(report)
  local memc = memcached.new(option_string)
  assert(memc)
  assert(type(memc.clone) == "function")
  local clone = memc:clone()
  assert(clone)
end)

spec:describe("memcached:last_error_message()", function(report)
  local memc = memcached.new(option_string)
  local err = memc:last_error_message()
  assert(err == "SUCCESS")
end)

spec:describe("memcached:increment()", function(report)
  local memc = memcached.new(option_string.. " --BINARY-PROTOCOL")
  local key = string.format("inc:%d", os.time())
  local ok, res = memc:increment(key, 1)
  report("new key", assert(ok == false))
  report("expected result", assert(res == 16))
  report("expected strerror result", assert(memc:strerror(res) == "NOT FOUND"))
  ok, res = memc:increment(key, 1, 10, os.time() + 100)
  report("with initial", ok)
  assert(tonumber(res) == 10)
end)


spec:describe("memcached:increment_by_key()", function(report)
  local memc = memcached.new(option_string.. " --BINARY-PROTOCOL")
  local group_key = string.format("inc_by_key:%d", os.time())
  local key = string.format("inc_by_key:%d", os.time())
  local ok, res = memc:increment_by_key(group_key, key, 1)
  report("new key", assert(ok == false))
  report("expected result", assert(res == 16))
  report("expected strerror result", assert(memc:strerror(res) == "NOT FOUND"))
  ok, res = memc:increment_by_key(group_key, key, 1, 10, os.time() + 100)
  report("with initial", ok)
  assert(tonumber(res) == 10)
end)

spec:describe("memcached:decrement()", function(report)
  local memc = memcached.new(option_string.. " --BINARY-PROTOCOL")
  local key = string.format("dec:%d", os.time())
  local ok, res = memc:decrement(key, 1)
  report("new key",assert(ok == false))
  report("expected result", assert(res == 16))
  report("expected strerror result", assert(memc:strerror(res) == "NOT FOUND"))
  ok, res = memc:decrement(key, 1, 10, os.time() + 100)
  report("with initial", ok)
  assert(tonumber(res) == 10)
end)

spec:describe("memcached:decrement_by_key()", function(report)
  local memc = memcached.new(option_string.. " --BINARY-PROTOCOL")
  local group_key = string.format("dec_by_key:%d", os.time())
  local key = string.format("dec_by_key:%d", os.time())
  local ok, res = memc:decrement_by_key(group_key, key, 1)
  report("new key", assert(ok == false))
  report("expected result", assert(res == 16))
  report("expected strerror result", assert(memc:strerror(res) == "NOT FOUND"))
  ok, res = memc:decrement_by_key(group_key, key, 1, 10, os.time() + 100)
  report("with initial", ok)
  assert(tonumber(res) == 10)
end)


spec:describe("memcached:delete(), memcached:exist()", function(report)
  local memc = memcached.new(option_string.. " --BINARY-PROTOCOL")
  local key = string.format("delete:%d", os.time())
  local ok, res = memc:decrement(key, 1, 10, os.time() + 100)
  report("with initial", ok)
  assert(tonumber(res) == 10)
  ok, res = memc:exist(key)
  report("exist(key) - yes", ok)
  ok, res = memc:delete(key, 0)
  report("delete(key)", ok)
  ok, res = memc:exist(key)
  report("exist(key) - no", not ok)
end)

spec:describe("memcached:flush_buffers()", function(report)
  local memc = memcached.new(option_string.. " --BINARY-PROTOCOL")
  local ok, res = memc:flush_buffers()
  assert(ok)
end)

spec:describe("memcached:flush()", function(report)
  local memc = memcached.new(option_string.. " --BINARY-PROTOCOL")
  local key = string.format("flush:%d", os.time())
  local ok, res = memc:decrement(key, 1, 10, os.time() + 100)
  report("setting dummy key to check if it disappears", ok)
  assert(tonumber(res) == 10)
  ok, res = memc:exist(key)
  report("exist(key) - yes", ok)
  ok, res = memc:flush(0)
  report("flush(0)", ok)
  ok, res = memc:exist(key)
  report("exist(key) - no", not ok)
end)


spec:describe("memcached:get()", function(report)
  local memc = memcached.new(option_string.. " --BINARY-PROTOCOL")
  local key = string.format("flush:%d", os.time())
  local ok, res, flags
  ok, res, flags = memc:decrement(key, 1, 10, os.time() + 100)
  report("setting dummy key to check the value", ok)
  assert(tonumber(res) == 10)
  ok, res, flags = memc:get(key)
  assert(res == "10")
  assert(ok)
  ok, res, flags = memc:get(os.time())
  assert(not ok)
  report("checking key casting to string", assert(memc:strerror(res) == "NOT FOUND"))
end)

spec:describe("memcached:set(), memcached:add(), memcached:replace()", function(report)
  local memc = memcached.new(option_string)
  local key = string.format("set.key:%d", os.time())
  local value = string.format("set.value:%d", os.time())
  local ok, res = memc:set(key, value)
  assert(ok)
  ok, res = memc:add(key, value)
  report("trying to add an already set key", assert(not ok))
  ok, res = memc:add(key..".add", value)
  report("add new key", assert(ok))
  ok, res = memc:replace(key, "new_value-"..value)
  report("replace a key", ok)
  ok, res = memc:replace(key.."not-set", value)
  report("replace a key that does not exist", not ok)
end)

spec:describe("memcached:set_by_key(), memcached:add_by_key(), memcached:replace_by_key()", function(report)
  local memc = memcached.new(option_string)
  local group_key = string.format("group:%d", os.time())
  local key = string.format("set.by_key:%d", os.time())
  local value = string.format("set.by_value:%d", os.time())
  local ok, res = memc:set_by_key(group_key, key, value)
  assert(ok)
  ok, res = memc:add_by_key(group_key, key, value)
  report("trying to add an already set key", assert(not ok))
  ok, res = memc:add_by_key(group_key..".add", key..".add", value)
  report("add new key", ok)
  ok, res = memc:replace_by_key(group_key, key, "new_value-"..value)
  report("replace a key", ok)
  ok, res = memc:replace_by_key(group_key, key.."not-set", value)
  report("replace a key that does not exist", not ok)
end)



spec:describe("memcached:prepend(), memcached:prepend_by_key()", function(report)
  local memc = memcached.new(option_string)
  local group_key = string.format("prepend_by_key:%d", os.time())
  local key = string.format("prepend:%d", os.time())
  local value = string.format("prepend.value:%d", os.time())
  local ok, res = memc:set(key, value)
  assert(ok)
  ok, res = memc:prepend(key, "prepend!")
  report("prepend to a value", ok)
  local gok, gvalue = memc:get(key)
  assert(gok)
  assert("prepend!"..value == gvalue)
  ok, res = memc:prepend_by_key(group_key, key, "group_prepend")
  report("prpened by key", ok)
end)

spec:describe("memcached:append(), memcached:append_by_key()", function(report)
  local memc = memcached.new(option_string)
  local group_key = string.format("append_by_key:%d", os.time())
  local key = string.format("append:%d", os.time())
  local value = string.format("append.value:%d", os.time())
  local ok, res = memc:set(key, value)
  assert(ok)
  ok, res = memc:append(key, "append!")
  report("append to a value", ok)
  local gok, gvalue = memc:get(key)
  assert(gok)
  assert(value.."append!" == gvalue)
  ok, res = memc:append_by_key(group_key, key, "group_append")
  report("append by key", ok)
end)

spec:describe("memcached:behavior_get(), memcached:behavior_set()", function(report)
  local memc = memcached.new(option_string)
  local ok, res, data
  ok, res = memc:behavior_set(memcached.BEHAVIOR.SND_TIMEOUT, 10)
  assert(ok)
  assert(res == memcached.SUCCESS)
  data = memc:behavior_get(memcached.BEHAVIOR.SND_TIMEOUT)
  assert(data == 10)
end)

spec:describe("memcached:generate_hash(), memcached:generate_hash_value()", function(report)
  local memc = memcached.new(option_string.. " --HASH=JENKINS")
  local ok, res1, res2
  local key = "test"
  res = memcached.generate_hash_value(key, memcached.HASH.JENKINS)
  assert(res == 1187193781)
end)

spec:describe("memcached:server_* functions", function(report)
  local memc = memcached.new(option_string)
  local ok, res
  report("server_count == 1", memc:server_count() == 1)
  ok, res = memc:server_add("localhost", 11211)
  report("server_add", ok)
  ok, res = memc:server_add_udp("localhost", 11211)
  report("server_add_udp", not ok)
  ok, res = memc:server_add_unix_socket("/tmp/memcached.sock")
  assert(ok)
end)

spec:describe("memcached:touch functions", function(report)
  local memc = memcached.new(option_string)
  local ok, res
  ok, res = memc:set("touch_test", "vvvv")
  assert(ok)
  ok, res = memc:touch("touch_test", os.time() + 10)
  assert(ok)
  ok, res = memc:touch_by_key("touch_group", "touch_test", os.time() + 10)
  assert(ok)
end)



spec:run()


